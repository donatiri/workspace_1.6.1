/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f4xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */

extern uint8_t SPI_TX;
uint8_t MODE=0;
uint8_t bufferRX[RX_BUFFER_SIZE];
uint8_t bufferTX[TX_BUFFER_SIZE];
uint8_t idX = 0;
uint8_t idxRX = 0;
uint8_t idxTX = 0;
uint8_t nBytesTX = 64;
uint8_t progr_num = 0;


//double buffering variables
uint8_t fillBuf=0;  // fillBuf=0 -> fill dBuf0, read dBuf1
uint8_t dBuf0[64];
uint8_t dBuf1[64];

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	static uint8_t counter_DRDY = 0;
    static uint8_t DUTY_EN = 0; // a flag, not a counter

    static uint16_t countTick = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  counter_DRDY++;

  if(fillBuf==0) {  //fill dBuf0 read dBuf1

	  if(countTick<64) {

		  countTick++;
		  dBuf0[countTick]= countTick;
	      SPI_TX = 1; // time to transmit


	  }

	  else if(countTick == 64 ) {

		  countTick=0;
		  fillBuf=1; //swap buffers

	  }
  }

  else if(fillBuf==1) {  //fill dBuf1 read dBuf0

	  if(countTick<64) {

		  countTick++;
		  dBuf1[countTick]= countTick;
	      SPI_TX = 1; // time to transmit


	  }

	  else if(countTick == 64 ) {

		  countTick=0;
		  fillBuf=0; //swap buffers

	  }
  }


   /*
    if (! DUTY_EN && counter_DRDY >= 80)
    {
        LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_9); // lower the dataready
	    LL_GPIO_SetOutputPin(GPIOD,LL_GPIO_PIN_13);   // set orange LED
        DUTY_EN = 1;

        SPI_TX = 1; // time to transmit

    }
    if (DUTY_EN && counter_DRDY >= 100)
    {
	    LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_9);   // raise the dataready
        LL_GPIO_ResetOutputPin(GPIOD,LL_GPIO_PIN_13); // reset orange LED
        DUTY_EN = 0;
        counter_DRDY = 0;
    }

*/


  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */
	//read the command sent from the master
	if(MODE==0) //receive mode
	{
		while(LL_SPI_IsActiveFlag_RXNE(SPI2) == 0 ); //wait until RX is full

		bufferRX[0] = LL_SPI_ReceiveData8(SPI2);

		switch(bufferRX[0])
		{

			case 0xEF :
				MODE=1; //switch to transmit mode for the next irq
				LL_SPI_DisableIT_RXNE(SPI2); //disable here so that first 2data are not 0 0 but 0 1
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
				LL_SPI_EnableIT_TXE(SPI2);
				bufferRX[0]=0;
				break;

			case 0x55 :
				MODE=1; //switch to transmit mode for the next irq
				LL_SPI_DisableIT_RXNE(SPI2);

				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
				LL_SPI_EnableIT_TXE(SPI2);
				bufferRX[0]=0;
				break;
				//send 64 bytes

			case 0x22 :
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
				LL_SPI_DisableIT_TXE(SPI2);
				bufferRX[0]=0;
				MODE=0;
				LL_SPI_TransmitData8(SPI2, 0x00);

				break;
		}
	return;

	}

	if(MODE==1) //transmit mode
	{
		static uint8_t chto_CP2130 = 0;
		if ( LL_SPI_IsActiveFlag_TXE(SPI2) == 1 && LL_SPI_IsEnabledIT_TXE(SPI2))

		{
			if (idxTX < nBytesTX)  //nBytesTX invece di TX_BUFFER_SIZE
			{
				/* there are still bytes to send */
				 //bufferTX[idxTX] = bufferTX[0]++ ;
				//bufferTX[1] = 0x55;
				idxTX++;

				if(fillBuf==0) { //read dBuf1
				chto_CP2130++;
				LL_SPI_TransmitData8(SPI2, dBuf1[chto_CP2130]);

				}
				else if(fillBuf==1) { //read dBuf0
				chto_CP2130++;
				LL_SPI_TransmitData8(SPI2, dBuf0[chto_CP2130]);

				}
			}
			else
			{
				idxTX = 0;
				/* All bytes sent, disable TX interrupt & enable RXNE interrupt*/
				//clear DR
				LL_SPI_TransmitData8(SPI2, 0x00);
				LL_SPI_DisableIT_TXE(SPI2);
				LL_SPI_EnableIT_RXNE(SPI2);
				MODE=0; //go back to receive mode
				bufferRX[0]=0;
			}
		}

	}



  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
